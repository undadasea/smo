unit funcSMO;

Interface
uses crt;

const bufferSize = 2;
const numberOfSources = 3;

type

  {arraytypeTime = array[1..NumberOfSources] of real;}
  
  arraytypeLyambdas = array[1..11] of real;
  {arraytypeSourceLyambdas = array[1..3] of real;}
  array11= array[1..11] of real;

  source_ptr = ^source_t;
  source_t = object
    Lambda: real;
    {arraySourceLyambdas: arraytypeSourceLyambdas;    nahui}
    timeLastGen: real;
    {arraySourceTime: arraytypeTime;    present time of each source}
    arrayMathWait: array11;
    {arrayMathWait1: array11;
    arrayMathWait2: array11;
    arrayMathWait3: array11;}
    arrayPosibility: array11;
    {arrayPosibility1: array11;
    arrayPosibility2: array11;
    arrayPosibility3: array11;}
    doneRequests: longint;
    refuseRequests: longint;
    allrequests: longint;
    {minTime: real;
    minTimeIndex: byte;}   {it should be out of this object}
    {timeGeneration: real;}
    function getGenerationTime: real;
    {procedure findMIN;    this too}
    procedure makeFree;
    end;


  arraytypeBuffer = array[1..bufferSize] of source_ptr;
  {arraytypeBufferInt=array[1..bufferSize] of integer;}

  buffer_t = object
    queue: arraytypeBuffer;  {capacity}
    {sourceIndex: arraytypeBufferInt;   ----------what source in what place}
    index: byte;    {fillness}
    timeWaiting: real;
    procedure makeFree;
    procedure takeFrom;
    procedure putInto(i: byte; s1: source_t; s2: source_t; s3: source_t);
    end;

  device_t = object
    lyambda: real;
    arrayLyambdas: arraytypeLyambdas;
    timeRealization: real;
    afterProcess: real;
    procedure getNewRealizationTime(LyambdaIndex: byte);
    end;


  assist = object                                                  {should i implement it before i use other objects?}
    function findMinTime(s1: source_t; s2: source_t; s3: source_t): real;
    function findMinTimeSource(s1: source_t; s2: source_t; s3: source_t): source_ptr;
    end;

Implementation

procedure source_t.makeFree;
  var i: byte;
  begin
    timeLastGen:=0;
    doneRequests:=0;
    refuseRequests:=0;
    allRequests:=0;
    {minTime:=0;
    minTimeIndex:=0;                out of here}
  end;


function source_t.getGenerationTime: real;
  var R1, R2: real;
  begin
        R1:=random;
        R2:=random;
    getGenerationTime:=(-1/Lambda)*(ln(R1)+ln(R2)); {.......................}
  end;

{procedure source.findMIN;
  begin
    if arraySourceTime[1]<=arraySourceTime[2] then
      begin
        minTime:=arraySourceTime[1];
        minTimeIndex:=1;
      end
    else
      begin
        minTime:=arraySourceTime[2];
        minTimeIndex:=2;
      end;
    if arraySourceTime[3]<minTime then
      begin
        minTime:=arraySourceTime[3];
        minTimeIndex:=3;
      end;
  end;}

function assist.findMinTime(s1: source_t; s2: source_t; s3: source_t): real;             {maybe exclude it}
  begin
    if s1.timeLastGen < s2.timeLastGen then
      begin
        if s1.timeLastGen <= s3.timeLastGen then
          findMinTime:=s1.timeLastGen
        else
          if s3.timeLastGen <= s2.timeLastGen then
            findMinTime:=s3.timeLastGen;
      end;
    if s2.timeLastGen < s3.timeLastGen then
      findMinTime:=s2.timeLastGen
    else
      findMinTime:=s3.timeLastGen;
  end;

function assist.findMinTimeSource(s1: source_t; s2: source_t; s3: source_t): source_ptr;
  begin
    if s1.timeLastGen < s2.timeLastGen then
      begin
        if s1.timeLastGen <= s3.timeLastGen then
          findMinTimeSource:=@s1
        else
          if s3.timeLastGen <= s2.timeLastGen then
            findMinTimeSource:=@s3;
      end;
    if s2.timeLastGen < s3.timeLastGen then
      findMinTimeSource:=@s2
    else
      findMinTimeSource:=@s3;
  end;

procedure buffer_t.makeFree;
var i: byte;
begin
  timeWaiting:=0;
end;

procedure buffer_t.takeFrom;
  var i, t: byte;
      maxPriority: real;

    begin
      {if buffer_.buffIndex=2 then
        begin
          if buffer_.sourceIndex[1]<buffer_.sourceIndex[2] then
            begin
              maxPriority:=buffer_.buff[1];
              t:=buffer_.sourceIndex[1];
              buffer_.buff[1]:=buffer_.buff[2];
              buffer_.sourceIndex[1]:=buffer_.sourceIndex[2];
              buffer_.buff[2]:=0;
              buffer_.sourceIndex[2]:=0;

            end
          else if buffer_.sourceIndex[1]>buffer_.sourceIndex[2] then
            begin
              maxPriority:=buffer_.buff[2];
              t:=buffer_.sourceIndex[2];
              buffer_.buff[2]:=0;
              buffer_.sourceIndex[2]:=0;
            end
          else if buffer_.sourceIndex[1]=buffer_.sourceIndex[2] then
            begin
              if buffer_.buff[1]<buffer_.buff[2] then
                begin
                  maxPriority:=buffer_.buff[1];
                  t:=buffer_.sourceIndex[1];
                  buffer_.buff[1]:=buffer_.buff[2];
                  buffer_.buff[2]:=0;
                  buffer_.sourceIndex[2]:=0;
                end
              else
                begin
                  maxPriority:=buffer_.buff[2];
                  t:=buffer_.sourceIndex[2];
                  buffer_.buff[2]:=0;
                  buffer_.sourceIndex[2]:=0;
                end;
            end;
        end;
      if buffer_.buffIndex=1 then
        begin
          maxPriority:=buffer_.buff[1];
          t:=buffer_.sourceIndex[1];
        end;
      buffer_.timeWaiting:=buffer_.timeWaiting+device_.afterProcess-maxPriority;
      RecWaitReq(t, maxPriority);
      device_.getNewRealizationTime(w);
      device_.afterProcess:=maxPriority+device_.timeRealization;
      source_.doneRequests:=source_.doneRequests+1;   -------------why-------ment done of 3 sources
      RecDoneReq(t); }
    end;

procedure buffer_t.putInto(i: byte; s1: source_t; s2: source_t; s3: source_t);
  var time: real;
      assistent: assist;
  begin

    {buff[index+1]:=assist.findMinTime(s1, s2, s3);}
    queue[i+1]:=assistent.findMinTimeSource(s1, s2, s3);
    time:=@(queue[i+1])^.timeLastGen;    {does it work?}
    {source_t.getGenerationTime(source_.minTimeIndex);}
    (assist.findMinTimeSource(s1, s2, s3))^.timeLastGen:=
        (assist.findMinTimeSource(s1, s2, s3))^.timeLastGen + time;
    {source_.arraySourceTime[source_.minTimeIndex]:=
       source_.arraySourceTime[source_.minTimeIndex]+source_.timeGeneration;}
    {RecAllReq;}
    {source_.findMIN;
    source_.allRequests:=source_.allRequests+1;}
    index:=i+1;

  end;



procedure device.getNewRealizationTime(LyambdaIndex: byte);
  var R: real;
  begin
  R := random;
  while (R=0) do
     begin
      R:=random;
     end;
    timeRealization:=-1/arrayLyambdas[LyambdaIndex]*ln(R);
  end;


begin
end.

